# ensure this scripts runs whenever packages.yml file is modified
# packages.yml hash {{ include ".chezmoidata/packages.yml" | sha256sum }}

{{- if eq .chezmoi.os "windows" }}

$tmpPackages = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ("packages-" + [System.Guid]::NewGuid().ToString() + ".json")
winget export -o $tmpPackages --include-versions --nowarn
$installedPackages = (Get-Content $tmpPackages | ConvertFrom-Json).Sources.Packages
# PackageIdentifier
# Version

# pwsh -nologo -noprofile {

write-output "{"
write-output "{ Installing Packages"
write-output "{"

{{- range .packages }}
$package = $installedPackages | Where-Object {$_.PackageIdentifier -eq {{ .win | quote }} }
if(-not $package) {
    write-output '# installing: {{ .win | quote }}'
    gsudo winget install --id {{.win | quote }} --silent --accept-source-agreements --accept-package-agreements --disable-interactivity --exact

    {{ if hasKey . "path" }}
        $path = "{{ .path }}"
    {{ else }}
        $path = $null
    {{ end }}

    if($path) {
        $currentPath = [Environment]::GetEnvironmentVariable("Path", "User")
        $pathArray = $currentPath -split ";"

        if ($pathArray -notcontains $path) {
            $pathArray += $path
            $newPath = $pathArray -join ";"

            write-output "# added '$Path' to PATH; Open a new PWSH to use it!"
            [Environment]::SetEnvironmentVariable("Path", $newPath, "User")
        }
    }
}
else {
    write-output '# already installed: {{ .win | quote }}'
}

{{- end }}

write-output "}"
write-output "} Installed Packages"
write-output "}"

# } # end pwsh
{{- end }} # end if os == windows
